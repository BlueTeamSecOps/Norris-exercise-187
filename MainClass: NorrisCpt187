/**
AUTHOR:E.J. Norris
COURSE: CPT 187
PURPOSE: This is where you are able to login and get your record reports from. It will also allow you print out discounts orders and a receipts on the screen. 
CREATE DATE: 2-22-2022
 */

package edu.cpt187.norris.exercise7;


import java.util.Scanner;//imports scanner function

public class MainClass 
{//start of Mainclass

	public static final char[] MENU_CHARS = {'A' ,'B' , 'Q'}; //declares and inits Constant for menu chars
	public static final char[] FILE_MENU_CHARS = {'A','B','R'}; //declares and inits Constant for File menu chars
	public static final char[] SUB_MENU_CHARS = {'A','B','C','D'}; //declares and inits Constant for sub menu chars
	public static final String[] MENU_OPTIONS = {"Login","Create an Account","Quit"};//declases and inits array for menu options
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory","Create Order", "Return to Main Menu" }; //declaress and inits File menu options as a constant
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat"; //declaress and inits Inventoty file
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat"; //declaress and inits user file


		public static void main(String[] args) //main
		{//Main start
			
			Order currentOrder = new Order();// new Order constructor

			Inventory currentInventory = new Inventory();// new inventory constructor

			Scanner input = new Scanner(System.in);//declare and init scanner

			WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);//new WriteOrders constructor

			UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);//new UserAccounts constructor

			String userName = "";//assignment statement
			char menuSelection = ' ';//assignment statement

			displayWelcomeBanner();// calls welcome banner method

			menuSelection = validateMainMenu(input);// declares inits and assigns variable

			while (menuSelection != 'Q')//run while test condition
			{//run while start
				
				currentUser.setUserAccountArrays();// invokes setUserAccountArrays() attribute

				userName = getUserName(input);// asks user for file name

				if (menuSelection != 'A')// selection structure test condition
				{//selection Start
					
					currentUser.setSearchedIndex(userName);//displays username based off index

					if (currentUser.getSearchedIndex() >= 0)//Test Condition
					{//selection Start

						displayAccountResults(userName);//displays Account results
					//Selection end
					}
					else//Test Condition
					{//selection Start

						currentUser.setWriteOneRecord(userName, getPassword(input));//writes new username and password

						displayAccountResults();//displays Account results
					//Selection end		
					}
				//Selection end
				}
				else//Test Condition
				{//selection Start
					
					currentUser.setSearchedIndex(userName, getPassword(input));//displays username and pass based off index

					if (currentUser.getSearchedIndex() < 0 )//Test Condition
					{//selection Start

						displayLoginError();// displays login error
					//Selection end		
					}
					else//Test Condition
					{//selection Start

						menuSelection = validateFileSelection(input);//validates the selection made from the file menu

						while (menuSelection != 'R')//Test Condition
						{//loop start

							if (menuSelection == 'A')//Test Condition//Test Condition
							{//loop start

								currentInventory.setLoadItems(getFileName(input));//retrieves items based off file input

								if (currentInventory.getRecordCount() <= 0)//Test Condition
								{//selection Start

									displayFileError();// shows file error
									
								}
								else//Test Condition
								{//selection Start

									displayRecordReport(currentInventory.getRecordCount());// shows record count
									
								}
							}
							else//Test Condition
							{//selection Start

								currentInventory.setSearchIndex(validateSearchValue(input));//valdiates search 

								if (currentInventory.getItemSearchIndex() < 0)//Test Condition
								{//selection Start
									
									displayNotFound();// shows not found error
									
								}
								else//Test Condition
								{//selection Start

									currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());//invokes the LastItemSelectedIndex setter from Order supporting class

									currentOrder.setItemID(currentInventory.getItemIDs());//invokes the ItemID setter from Order supporting class

									currentOrder.setItemPrice(currentInventory.getItemPrices());//invokes the ItemPrice setter from Order supporting class

									currentOrder.setItemName(currentInventory.getItemNames());//invokes the ItemName setter from Order supporting class

									currentOrder.setHowMany(validateHowMany(input));//invokes the how many setter from Order supporting class

									if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())//Test Condition
									{//selection Start

										displayOutOfStock();// displays the out of stock error message
										
									}
									else//Test Condition
									{//selection Start
										currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));//invokes the Discount Type setter from Order supporting class

										currentOrder.setDiscountName(currentInventory.getDiscountNames());//invokes the Discount Name setter from Order supporting class

										currentOrder.setDiscountRate(currentInventory.getDiscountRates());//invokes the Discount Rate setter from Order supporting class

										currentOrder.setDecreaseInStock(currentInventory);//invokes the Decrease in Stock setter from Order supporting class

										currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());//invokes the Prize name setter from Order supporting class and passes it 2 behaviors from the Inventory Class
										
										//invokes the setweriteOrder setter from Order supporting class
										orders.setWriteOrder(currentOrder.getItemID(), 
												currentOrder.getItemName(), 
												currentOrder.getItemPrice(), 
												currentOrder.getHowMany(), 
												currentOrder.getTotalCost());

										if (currentOrder.getDiscountRate() > 0.0)//Test Condition
										{//selection Start
											
											//displays version of the order report
											displayOrderReport(userName, currentOrder.getItemName(), 
													currentOrder.getItemPrice(), currentOrder.getHowMany(), 
													currentOrder.getDiscountName(), currentOrder.getDiscountRate(), 
													currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(),
													currentOrder.getSubTotal(), currentOrder.getTaxRate(), 
													currentOrder.getTaxAmt(), currentOrder.getTotalCost(), 
													currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
										
										}
										else//Test Condition
										{//selection Start
											//displays version of the order report
											displayOrderReport(userName, currentOrder.getItemName(), 
													currentOrder.getItemPrice(), currentOrder.getHowMany(),  
													currentOrder.getSubTotal(), currentOrder.getTaxRate(), 
													currentOrder.getTaxAmt(), currentOrder.getTotalCost(), 
													currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
										//Selection end	
										}
									//Selection end	
									}
								//Selection end		
								}
							//Selection end	
							}

							menuSelection = validateFileSelection(input);// invokes the validate file menu and assigns it to menuSelection
						//loop end	
						}
					//Selection end		
					}
				//loop end		
				}

				menuSelection = validateMainMenu(input);// invokes the validate main menu and assigns it to menuSelection
			//runWhile end
			}

			currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());//gets current Inventory from the inventory supportting class

			if (orders.getRecordCount() > 0)//Test Condition
			{//selection Start

				//displays final report 
				displayFinalReport(currentInventory.getItemIDs(), 
						currentInventory.getItemNames(), 
						currentInventory.getItemPrices(), 
						currentInventory.getOrderQuantities(),
						currentInventory.getOrderTotals(), 
						currentInventory.getRecordCount(), 
						currentInventory.getGrandTotal());
			//selection end
			}
			
			displayFarewellMessage();//diplays farewell message
			
			input.close();// closes Scanner
		//end of main
		}
		
	//VOIDS
	public static void displayWelcomeBanner() //declares method name
	{// method start

		//welcome Banner
		System.out.println("***** ***** ***** ***** ***** *****"); //Border Start
		System.out.println("Welcome to Norris Exercise 7"); //Program name
		System.out.println("This Program will let you ring up "); //program description
		System.out.println("items and generate a reciept"); //program description
		System.out.println("***** ***** ***** ***** ***** *****"); //Border End

		//method end
	}
	
	public static void displayMainMenu()//declares method name
	{//method start

		int localIndex =0;//declare and init local variable

		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //Border Start
		System.out.printf("%-30s\n" , "MAIN MENU"); //menu title
		while (localIndex < MENU_OPTIONS.length)//test condition
		{
			System.out.printf("%c%s%2s\n" , MENU_CHARS[localIndex] ," for " , MENU_OPTIONS[localIndex] );//menu option 1
			localIndex++;// incrementor

		}

		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //Border End
		System.out.printf("%-30s\n" , "Enter you selection here: "); // displays string to ask for user input

	}
	
	public static void displayFileSelection()//declares method name
	{//method start

		int localIndex =0;//declare and init local variable

		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //Border Start
		System.out.printf("%-30s\n" , "FILE MENU"); //menu title
		while (localIndex < FILE_MENU_OPTIONS.length)//test condition
		{
			System.out.printf("%c%s%2s\n" , FILE_MENU_CHARS[localIndex] ," for " , FILE_MENU_OPTIONS[localIndex] );//menu option 1
			localIndex++;// incrementor

		}

		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //Border End
		System.out.printf("%-30s\n" , "Enter you selection here: "); // displays string to ask for user input

	}
	
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)//declares method name
	{
		int localIndex = 0;//declare and init local variable

		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //Border Start
		System.out.printf("%-30s\n" , "DISCOUNT MENU"); //menu title
		while(localIndex < borrowedDiscountNames.length)//test condition
		{
			System.out.printf("%c%s%2s%15.1f%%\n" , SUB_MENU_CHARS[localIndex] ," for " , borrowedDiscountNames[localIndex] , borrowedDiscountRates[localIndex] * 100); //displays padded option for char A selection
			localIndex++;// incrementor

		}
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //Border End
		System.out.printf("%-30s\n" , "Enter you selection here: "); // displays string to ask for user input	

		// method end	
	}
	
	public static void displayLoginError() //declares method name
	{//method Start

		//farewell message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //message border
		System.out.println("LOGIN ERROR"); //message	
		System.out.println("UserName and/or Password is Incorrect"); // message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //message border
		//Method End	
	}	
	
	public static void displayAccountResults() //declares method name
	{//method Start

		//farewell message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //message border
		System.out.println("ACCOUNT RESULTS"); // message	
		System.out.println("New account created"); //message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //message border
		//Method End	
	}
	
	public static void displayAccountResults(String userName) //declares method name
	{//method Start

		//farewell message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //message border
		System.out.println("ACCOUNT RESULTS"); //message	
		System.out.printf("%s%2s%2s\n" ,"Account not created:", userName,  " already exists"); //message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //message border
		//Method End	
	}
	
	public static void displayRecordReport(int recordCount) //declares method name
	{//method Start

		//farewell message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //message border
		System.out.println("RECORD REPORT"); //final farewell message	
		System.out.printf("%s%4s\n" , recordCount,  " records processed"); //farewell message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //message border
		//Method End	
	}
	
	public static void displayFileError() //declares method name
	{//method Start

		//farewell message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //message border
		System.out.println("FILE ERROR"); //final farewell message	
		System.out.printf("%s\n", "The file named was not found or could not be opened"); //farewell message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //message border
		//Method End	
	}
	
	public static void displayNotFound() //declares method name
	{//method Start

		//farewell message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //message border
		System.out.println("NOT FOUND ERROR"); // message	
		System.out.println("The search value entered was not found"); //message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //message border
		//Method End	
	}		

	public static void displayOutOfStock() //declares method name
	{//method Start

		//farewell message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //message border
		System.out.println("OUT OF STOCK ERROR"); // message	
		System.out.println("The quanitiy entered is greater than the quantitiy in-stock"); // message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //message border
		//Method End	
	}
	
	public static void getSearchValue() //declares method name
	{//method Start

		// message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //message border
		System.out.println("Enter the Search value:"); // message

	}
	
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount) 
	{

		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ "); //Border Start
		System.out.println("Order Report");  // order report title
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");//Border  for display banner
		System.out.printf("-30s%3s\n", "Customer Name:" , borrowedUserName);//username
		System.out.printf("\n");// line break
		System.out.printf("%-30s%3s\n" , "Item Name:", borrowedItemName);// displays item Name and corresponding variable
		System.out.printf("%-30s%s%9.2f\n" , "Item Price:" , "$" , borrowedItemPrice); //displays item original Price and corresponding variable
		System.out.printf("\n");// line break
		System.out.printf("%-30s%7d\n" , "Quantity:" , borrowedHowMany);// displays quantity and corresponding variable
		System.out.printf("\n");// line break
		System.out.printf("%-30s%s%9.2f\n" , "SubTotal:" , "$" , borrowedSubTotal);// displays subtotal with a dollar Sign and corresponding variable
		System.out.printf("%-30s%9.1f%%\n" , "Tax Rate:" , borrowedTaxAmt * 100);// displays tax string with a percent and corresponding variable
		System.out.printf("%-30s%s%9.2f\n" , "Tax Amount:" , "$" , borrowedTaxAmt);// displays tax string with a dollar Sign and corresponding variable
		System.out.printf("\n");// line break
		System.out.printf("%-30s%s%9.2f\n" , "Order Total:" , "$" , borrowedTotalCost); // displays total cost string and corresponding variable 
		System.out.printf("\n");// line break
		System.out.printf("%-30s%9s\n" , "Prize:" , borrowedPrizeName); // displays total cost string and corresponding variable 
		System.out.printf("\n");// line break
		System.out.printf("%-30s%s%s\n" , "Buy more now: Only " , borrowedInStockCount, " left in Stock!"); // displays total cost string and corresponding variable 


	}

	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount) 
	{

		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ "); //Border Start
		System.out.println("Order Report");  // order report title
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");//Border  for display banner
		System.out.printf("%-30s%3s\n", "Customer Name:" , borrowedUserName);//username
		System.out.printf("\n");// line break
		System.out.printf("%-30s%3s\n" , "Item Name:", borrowedItemName);// displays item Name and corresponding variable
		System.out.printf("%-30s%s%9.2f\n" , "Item Price:" , "$" , borrowedItemPrice); //displays item original Price and corresponding variable
		System.out.printf("\n");// line break
		System.out.printf("%-30s%3s\n" , "Discount Name:", borrowedDiscountName);// displays item Name and corresponding variable
		System.out.printf("%-30s%9.1f%%\n" , "Discount Rate:" , borrowedDiscountRate * 100); // displays percentage of taxation
		System.out.printf("%-30s%s%9.2f\n" , "Discount Amount:" , "$" , borrowedDiscountAmt);// displays discount Amount with a dollar Sign and corresponding variable
		System.out.printf("%-30s%s%9.2f\n" , "Discount Price:" , "$" , borrowedDiscountPrice); // displays discount price with a dollar Sign and corresponding variable
		System.out.printf("\n");// line break
		System.out.printf("%-30s%7d\n" , "Quantity:" , borrowedHowMany);// displays quantity and corresponding variable
		System.out.printf("\n");// line break
		System.out.printf("%-30s%s%9.2f\n" , "SubTotal:" , "$" , borrowedSubTotal);// displays subtotal with a dollar Sign and corresponding variable
		System.out.printf("%-30s%9.1f%%\n" , "Tax Rate:" , borrowedTaxAmt * 100);// displays tax string with a percent and corresponding variable
		System.out.printf("%-30s%s%9.2f\n" , "Tax Amount:" , "$" , borrowedTaxAmt);// displays tax string with a dollar Sign and corresponding variable
		System.out.printf("\n");// line break
		System.out.printf("%-30s%s%9.2f\n" , "Order Total:" , "$" , borrowedTotalCost); // displays total cost string and corresponding variable 
		System.out.printf("\n");// line break
		System.out.printf("%-30s%9s\n" , "Prize:" , borrowedPrizeName); // displays total cost string and corresponding variable 
		System.out.printf("\n");// line break
		System.out.printf("%-30s%s%s\n" , "Buy more now: Only " , borrowedInStockCount, " left in Stock!"); // displays total cost string and corresponding variable 


	}

	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities, double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal)
	{


		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ "); //Border Start
		System.out.println("Final Report");  //title
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");//Border  
		System.out.printf("%-30s%5s%9s%8s10s\n" , "ID", "NAME", "PRICE", "QTY", "TOTAL" );//menu tags
		System.out.printf("%-30s%5s%9s%8s10s\n" , borrowedItemIDs, borrowedItemNames, borrowedItemPrices, borrowedOrderQuantities, borrowedOrderTotals );//menu tags
		System.out.printf("\n");//line break
		System.out.printf("%s\n" , "GRAND TOTAL" );//single menu tag
		System.out.printf("%s\n" , borrowedGrandTotal );//single menu tag
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");//Border  for final Report
		System.out.printf("\n");//line break

	}
	
	public static void displayFarewellMessage() //declares method name
	{//method Start

		//farewell message
		System.out.println("Thank you for using our Program!"); //farewell message
		System.out.println("Visit us again sometime!"); //final farewell message	

		//Method End	
	}
	
	//VR Methods
	
	public static String getUserName(Scanner borrowedInput) // declares method
	{//start of method

		String localUserName = "";//declares and init local variable to default value
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");// border
		System.out.println("Enter your username: ");//prompts user to enter their name
		localUserName = borrowedInput.next();//stores input as local variable

		return localUserName;// returns input to variable

	}//End of method
	
	public static String getPassword(Scanner borrowedInput) // declares method
	{//start of method

		String localPassword = "";//declares and init local variable to default value
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");// border
		System.out.println("Enter your password: ");//prompts user to enter their Password
		localPassword = borrowedInput.next();//stores input as local variable

		return localPassword;// returns input to variable

	}//End of method

	public static char validateMainMenu(Scanner borrowedInput)//method name
	{//method start

		char localSelection = ' ';//declares variable as char and init default value


		displayMainMenu();// call to void method output
		localSelection = borrowedInput.next().toUpperCase().charAt(0);// asks user for input then converts input to capitol letter referencing char array

		while(localSelection != MENU_CHARS[0] && localSelection != MENU_CHARS[1] && localSelection != MENU_CHARS[2] )//test condition
		{//loop start

			System.out.println("~~ERROR: Invalid selection.~~~");//error message

			displayMainMenu(); // call to void method output	
			localSelection = borrowedInput.next().toUpperCase().charAt(0);// asks user for input then converts input to capitol letter referencing char array


		}// loop end

		return localSelection;// returns input to variable

	}//method end 	
	
	public static char validateFileSelection(Scanner borrowedInput)//method name
	{//method start

		char localSelection = ' ';//declares variable as char and init default value


		displayFileSelection();// call to void method output
		localSelection = borrowedInput.next().toUpperCase().charAt(0);// asks user for input then converts input to capitol letter referencing char array

		while(localSelection != FILE_MENU_CHARS[0] && localSelection != FILE_MENU_CHARS[1] && localSelection != FILE_MENU_CHARS[2] )//test condition
		{//loop start

			System.out.println("~~ERROR: Invalid selection.~~~");//error message

			displayFileSelection(); // call to void method output	
			localSelection = borrowedInput.next().toUpperCase().charAt(0);// asks user for input then converts input to capitol letter referencing char array


		}// loop end

		return localSelection;// returns input to variable
	}
	
	public static String validateHowMany(Scanner borrowedInput)//declares method
	{//start of method

		String localHowMany = ""; //declares and init local variable

		System.out.println("Please enter a quantity: "); //asks User for quantity to purchase
		localHowMany = borrowedInput.next();// declares user input as howMany variable 

		while (Integer.parseInt(localHowMany) <= 0)// loop test condition
		{//start of loop
			System.out.println("~~ERROR: Invalid selection.~~~");//error message

			System.out.println("Please enter a quantity: "); //asks User for quantity to purchase

			localHowMany = borrowedInput.next();// declares user input as howMany variable 
		}//end of loop

		return localHowMany;// returns input to variable

	}//End of method	

	public static String getFileName(Scanner borrowedInput) //declares method name
	{//method Start

		String localFileName = "";//declares and init local variable to default value
		// message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"); //message border
		System.out.println("Enter the file name with extension (ie file.txt):"); // message
		localFileName = borrowedInput.next();//stores input as local variable
		return localFileName;// returns input to variable
	}
	
	public static int validateSearchValue(Scanner borrowedInput) // declares method
	{//start of method

		int localSearchValue;//declares and init local variable to default value
		
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");//prompts user to enter their name
		System.out.println("Enter ther search number Value: ");//prompts user to enter their name
		localSearchValue = borrowedInput.nextInt();//stores input as local variable
		
		while (localSearchValue <= 0 )// loop test condition
		{//start of loop
			System.out.println("~~ERROR: Invalid selection.~~~");//error message

			System.out.println("Enter ther search Value: "); //asks User for quantity to purchase

			localSearchValue = borrowedInput.nextInt();// declares user input as howMany variable 
		}//end of loop

		return localSearchValue;// returns input to variable

	}//End of method

	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)// declares method
	{//start of method

		char localSelection = ' ';//declares variable as char and init default value

		//item menu input
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);// asks user for input then converts input to capitol letter referencing char array

		while (localSelection != SUB_MENU_CHARS[0] && localSelection != SUB_MENU_CHARS[1] && localSelection != SUB_MENU_CHARS[2] && localSelection != SUB_MENU_CHARS[3])//loop test condition
		{//start of loop

			System.out.println("~~ERROR: Invalid selection.~~~");//error message

			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);// asks user for input then converts input to capitol letter referencing char array


		}// end of loop

		return localSelection;// returns input to variable

	}//End of method	
//end of mainClass	
}
